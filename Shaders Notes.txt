=== Shadertoy built-in ===

"Shadertoy unofficial plugin" allows for easy color picking 

iResolution = vec3(x, y, z) //Z is depth, only used for 3D textures

iTime, an ever-increasing float representing the number of seconds passed since the beginning of running the shader

=== GLSL built-in ===

Swizzling, aka writing e.g. iResolution.xy is equivalent to creating a new vec2 and assigning it x, and y for the values
-- You can do this in any order, e.g. iResolution.zy and it'll still put it in a new vec2 with z, and y
-- Can even do stuff like iResolution.xyyzx

Ton of math functions available to us, e.g. degrees, sin, cos, asin, tan, atan, pow, exp, log, sqrt, abs, sign, floor, fract, clamp, smoothstep, etc

length() calculates the length of a vector from its end to the origin - if you center the origin, you can use to see how far from center


=== General notes ===

Fragcoord's range is dependent on the size of the canvas, e.g. if you have a monitor that is 1600 wide (fragcoord.x will go from 0 to this)
and 900 pixels tall (fragcoord.y will range from 0 to 900)

We want these coordinates in *clip space*, meaning they are not fixed for one specific canvas size, but can work for any and all

We achieve this by making the x and y spaces range from -1 to 1

``````````````````````````````````````````````````````
vec2 uv = fragCoord / iResolution.xy; //uv holds transformed pixel coordinates

fragColor = vec4(uv.x, 0.0, 0.0, 1.0); //Can see in red channel x values from 0 to 1 to the right
// fragColor = vec4(uv.x, uv.y, 0.0, 1.0); //Goes from 0 to 1 for y now for the green values too, interpolates with red
// Could also do it like ... = vec4(uv, 0.0, 1.0);

``````````````````````````````````````````````````````

Right now, it ranges from 0 to 1 on x and y with the center being 0.5, 0.5 - we want to change this to -1 and 1 so the center is 0, 0

To do this, we can subtract 0.5 from both components of our uv vector

``````````````````````````````````````````````````````
uv = uv - 0.5;

``````````````````````````````````````````````````````

Now the space is centered, however, the edges range from -0.5 to 0.5, meaning we need to double it now

``````````````````````````````````````````````````````
uv = uv * 2.0;
// Can condense into one line, aka vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;

``````````````````````````````````````````````````````

Now, let's use the length function to see how far a vector is from our new centered origin 0, 0

``````````````````````````````````````````````````````
float d = length(uv);

//fragColor = vec4(d, 0.0, 0.0, 1.0); //Can see visually how far from center it is

``````````````````````````````````````````````````````

If we changed the aspect ratio to not be a square with how our code is rn, our UV ranges from 0 to 1, so its stretched

To fix this, we need to multiply the x component of our UVs by the current aspect of the canvas, aka its width divided by height

``````````````````````````````````````````````````````
uv.x *= iResolution.x / iResolution.y;

// Can simplify single line again to vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;

``````````````````````````````````````````````````````

Sine distance function found with our current circle visual; aka, distance is 0 right on the shape (0.5 out for our circle due to d -= 0.5)
-- and goes out more the further away you get, or even inside the shape

There are a ton of free to find distance functions out there online, or you can even make your own

To show how the distance actually goes up inside the circle, do "d = abs(d);"

If we want to make a sharp cutoff for our circle (e.g. 1 if it's far enough from the circle e.g. 0.5 away, 0 if close enough)
-- we can use the step function, step(threshold, value) - will always return 0 if value is less than threshold, but 1 otherwise

``````````````````````````````````````````````````````
d = step(0.1, d);

``````````````````````````````````````````````````````

If you want a smoother step, we can use smoothstep - takes 3 parameters, smoothstep(firstthres, secondthres, value)
-- 0 before first threshold, 1 after second threshold, and interpolates smoothly between the first and second threshold

``````````````````````````````````````````````````````
d = smoothstep(0.0, 0.1, d);

``````````````````````````````````````````````````````

Before the smooth step and before the abs(), we can also add d = sin(d), however from 0 to 1 it doesn't change much
-- since the sine function basically still goes from 0 to 1 and not up and down, to change this and make it repeat more,
-- we can increase the frequency like sin(x * 8.0)

``````````````````````````````````````````````````````
d = sin(d*8.)/8.;

// Can also make it offset by the time like d = sin(d*8. + iTime)/8.;

``````````````````````````````````````````````````````

Now, to achieve a more neon look, we will inverse d so the black rings are actually the white ones

``````````````````````````````````````````````````````
d = 1.0 / d;

``````````````````````````````````````````````````````

The screen now will be entirely white; this is because it has super high outputs for low inputs, and since we're in clip space
-- it won't exceed 1, making all of them greater or equal to 1 for the output, aka white
-- To fix this, we can scale down the inverse function like so; d = 0.1/d

``````````````````````````````````````````````````````
d = 0.02/d;

``````````````````````````````````````````````````````

Now we can see a glowy effect coming from the rings
-- Now, let's introduce some more color

Make a new vec3 col = vec3(1.0, 0.0, 0.0); aka red, and after you calculate d, multiply and set color to it

``````````````````````````````````````````````````````
col *= d;

fragColor = vec4(col, 1.0);

``````````````````````````````````````````````````````

Our colors are actually not limited to the 0 to 1 range here! We can even change it up to 3.0 if we'd like to intesify the color!

``````````````````````````````````````````````````````
vec3 col = vec3(1.0, 2.0, 3.0);

``````````````````````````````````````````````````````

Now, to add even more variety to the color, we can add a palette function in

``````````````````````````````````````````````````````
vec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d){
	return a + b * cos(6.28318*(c*t+d));
}

``````````````````````````````````````````````````````

Visit the website iquilezles.org/articles/palettes to allow you to create infinitely many different palettes using trig
-- The 4 vec3 inputs are what indicate which palette of colors it'll be, which you can even make your own!
-- Rainbow for example is a = {0.5, 0.5, 0.5}, b = {0.5, 0.5, 0.5}, c = {1.0, 1.0, 1.0}, d = {0.0, 0.33, 0.67}

To create your own, visit the website dev.thi.ng/gradients, allowing you to visually create your own palette and understand how the function works

After you decide on a palette, you can actually directly change the function to remove the parameters and hard-code in your palette

``````````````````````````````````````````````````````
vec3 palette(float t){
	vec3 a = vec3(0.5, 0.5, 0.5);
//.......do same for b, c
	vec3 d = ....

	return a ....same as before
}

vec3 col = palette(d);

``````````````````````````````````````````````````````

You can now also add a time offset for the t value you pass in for palette (add it to d), palette(d + iTime)

To do spatial repetition, we can use the fract() function for this

The fract function simply returns the fractional part of its input, aka the numbers after the decimal point
-- from 0.0 to 1.0

uv = fract(uv);
fragColor = vec4(uv, 0.0, 1.0);

You'll notice however we have 4 versions of our original-looking UV space, meaning we need to recenter each one now 
-- similar to how we did it before

To resolve it, scale the UVs first then subtracting 0.5 to center them

``````````````````````````````````````````````````````
uv *= 2.0;
uv = fract(uv);
uv -= 0.5;

...

fragColor = vec4(col, 1.0);

// Shortened into one line it'd be uv = fract(uv * 2.0) - 0.5;
``````````````````````````````````````````````````````

Now, d represents the center to the origin of each repetition; however, if we keep track of the original d
-- for the distance to the origin of the entire canvas, we can do even more cool effects

Create a new uv0 variable and assign its value to uv right after the first calculation for uv, but before all the altering ones

``````````````````````````````````````````````````````
vec2 uv0 = uv;

``````````````````````````````````````````````````````

We now can get a trippy color effect by replacing d as the palette parameter we're passing in with the length of uv0

``````````````````````````````````````````````````````
vec3 col = palette(lenth(uv0) + iTime);

``````````````````````````````````````````````````````

The key to getting fractal appearances is **iterations**, aka recursion of sorts

In order to do this, we will have to encapsulate our entire color calculation code into a loop (for loop here)

``````````````````````````````````````````````````````
vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
vec2 uv0 = uv;
vec3 finalColor = vec3(0.0);

for (float i = 0.0; i < 3.0; i++){
	uv = fract(uv * 2.0) - 0.5;

	float d = length(uv);

	vec3 col = palette(length(uv0) + iTime*0.4);

	d = sin(d*8. + iTime)/8.;
	d = abs(d);

	d = 0.02/d;

	finalColor += color * d;
}

fragColor = vec4(finalColor, 1.0);

``````````````````````````````````````````````````````

The iterations might line up too well, and so to introduce more visual interest we can change the 2.0 in the fract
-- function to something like 1.5 (or any other decimal number)

To increase variations further, we can use the exponential function

``````````````````````````````````````````````````````
float d = length(uv) * exp(-length(uv0));

``````````````````````````````````````````````````````

To visualize how this works, visit the website graphtoy.com

exp(-x) acts similarly to the function of 1/x, but doesn't go to infinity at 0; multiplying x by this gives a smooth
-- curve similar to our original x linear function

You can reduce the falloff for the inverse function alongside this to balance the effect even more

We can even include i as part of our calculations to make it even more diverse per iteration

Let's pass in i to the palette function

``````````````````````````````````````````````````````
vec3 col = palette(length(uv0) + i*.4 + iTime*.4);

``````````````````````````````````````````````````````

Lastly, to enhance the overall contrast of the image, let's use the power function

``````````````````````````````````````````````````````
d = pow(0.01 / d, 2.0);

``````````````````````````````````````````````````````

This works because from 0 to 1, it essentially essentuates the darker colors; has a "dip" like appearance when graphed
-- Changing it from 2.0 to something like 1.2 can make the effect not as harsh and have a nice balanced contrast

``````````````````````````````````````````````````````
d = pow(0.01 / d, 1.2);

``````````````````````````````````````````````````````

